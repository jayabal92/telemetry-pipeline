// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: mq.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MQ_Produce_FullMethodName       = "/mq.MQ/Produce"
	MQ_Fetch_FullMethodName         = "/mq.MQ/Fetch"
	MQ_Metadata_FullMethodName      = "/mq.MQ/Metadata"
	MQ_CreateTopic_FullMethodName   = "/mq.MQ/CreateTopic"
	MQ_DeleteTopic_FullMethodName   = "/mq.MQ/DeleteTopic"
	MQ_CommitOffsets_FullMethodName = "/mq.MQ/CommitOffsets"
	MQ_FetchOffsets_FullMethodName  = "/mq.MQ/FetchOffsets"
)

// MQClient is the client API for MQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Client-facing API
type MQClient interface {
	Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
	DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error)
	CommitOffsets(ctx context.Context, in *CommitOffsetsRequest, opts ...grpc.CallOption) (*CommitOffsetsResponse, error)
	FetchOffsets(ctx context.Context, in *FetchOffsetsRequest, opts ...grpc.CallOption) (*FetchOffsetsResponse, error)
}

type mQClient struct {
	cc grpc.ClientConnInterface
}

func NewMQClient(cc grpc.ClientConnInterface) MQClient {
	return &mQClient{cc}
}

func (c *mQClient) Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProduceResponse)
	err := c.cc.Invoke(ctx, MQ_Produce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, MQ_Fetch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQClient) Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, MQ_Metadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTopicResponse)
	err := c.cc.Invoke(ctx, MQ_CreateTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQClient) DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTopicResponse)
	err := c.cc.Invoke(ctx, MQ_DeleteTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQClient) CommitOffsets(ctx context.Context, in *CommitOffsetsRequest, opts ...grpc.CallOption) (*CommitOffsetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitOffsetsResponse)
	err := c.cc.Invoke(ctx, MQ_CommitOffsets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQClient) FetchOffsets(ctx context.Context, in *FetchOffsetsRequest, opts ...grpc.CallOption) (*FetchOffsetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchOffsetsResponse)
	err := c.cc.Invoke(ctx, MQ_FetchOffsets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MQServer is the server API for MQ service.
// All implementations must embed UnimplementedMQServer
// for forward compatibility.
//
// Client-facing API
type MQServer interface {
	Produce(context.Context, *ProduceRequest) (*ProduceResponse, error)
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error)
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
	DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicResponse, error)
	CommitOffsets(context.Context, *CommitOffsetsRequest) (*CommitOffsetsResponse, error)
	FetchOffsets(context.Context, *FetchOffsetsRequest) (*FetchOffsetsResponse, error)
	mustEmbedUnimplementedMQServer()
}

// UnimplementedMQServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMQServer struct{}

func (UnimplementedMQServer) Produce(context.Context, *ProduceRequest) (*ProduceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Produce not implemented")
}
func (UnimplementedMQServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedMQServer) Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}
func (UnimplementedMQServer) CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedMQServer) DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (UnimplementedMQServer) CommitOffsets(context.Context, *CommitOffsetsRequest) (*CommitOffsetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitOffsets not implemented")
}
func (UnimplementedMQServer) FetchOffsets(context.Context, *FetchOffsetsRequest) (*FetchOffsetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOffsets not implemented")
}
func (UnimplementedMQServer) mustEmbedUnimplementedMQServer() {}
func (UnimplementedMQServer) testEmbeddedByValue()            {}

// UnsafeMQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MQServer will
// result in compilation errors.
type UnsafeMQServer interface {
	mustEmbedUnimplementedMQServer()
}

func RegisterMQServer(s grpc.ServiceRegistrar, srv MQServer) {
	// If the following call pancis, it indicates UnimplementedMQServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MQ_ServiceDesc, srv)
}

func _MQ_Produce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQServer).Produce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MQ_Produce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQServer).Produce(ctx, req.(*ProduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQ_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MQ_Fetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQ_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MQ_Metadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQServer).Metadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQ_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MQ_CreateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQ_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MQ_DeleteTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQServer).DeleteTopic(ctx, req.(*DeleteTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQ_CommitOffsets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitOffsetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQServer).CommitOffsets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MQ_CommitOffsets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQServer).CommitOffsets(ctx, req.(*CommitOffsetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQ_FetchOffsets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOffsetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQServer).FetchOffsets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MQ_FetchOffsets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQServer).FetchOffsets(ctx, req.(*FetchOffsetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MQ_ServiceDesc is the grpc.ServiceDesc for MQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mq.MQ",
	HandlerType: (*MQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Produce",
			Handler:    _MQ_Produce_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _MQ_Fetch_Handler,
		},
		{
			MethodName: "Metadata",
			Handler:    _MQ_Metadata_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _MQ_CreateTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _MQ_DeleteTopic_Handler,
		},
		{
			MethodName: "CommitOffsets",
			Handler:    _MQ_CommitOffsets_Handler,
		},
		{
			MethodName: "FetchOffsets",
			Handler:    _MQ_FetchOffsets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mq.proto",
}

const (
	Replicator_Append_FullMethodName = "/mq.Replicator/Append"
)

// ReplicatorClient is the client API for Replicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Leader-to-follower API
type ReplicatorClient interface {
	Append(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (*ReplicateResponse, error)
}

type replicatorClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicatorClient(cc grpc.ClientConnInterface) ReplicatorClient {
	return &replicatorClient{cc}
}

func (c *replicatorClient) Append(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (*ReplicateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplicateResponse)
	err := c.cc.Invoke(ctx, Replicator_Append_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicatorServer is the server API for Replicator service.
// All implementations must embed UnimplementedReplicatorServer
// for forward compatibility.
//
// Leader-to-follower API
type ReplicatorServer interface {
	Append(context.Context, *ReplicateRequest) (*ReplicateResponse, error)
	mustEmbedUnimplementedReplicatorServer()
}

// UnimplementedReplicatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReplicatorServer struct{}

func (UnimplementedReplicatorServer) Append(context.Context, *ReplicateRequest) (*ReplicateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedReplicatorServer) mustEmbedUnimplementedReplicatorServer() {}
func (UnimplementedReplicatorServer) testEmbeddedByValue()                    {}

// UnsafeReplicatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicatorServer will
// result in compilation errors.
type UnsafeReplicatorServer interface {
	mustEmbedUnimplementedReplicatorServer()
}

func RegisterReplicatorServer(s grpc.ServiceRegistrar, srv ReplicatorServer) {
	// If the following call pancis, it indicates UnimplementedReplicatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Replicator_ServiceDesc, srv)
}

func _Replicator_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Replicator_Append_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).Append(ctx, req.(*ReplicateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Replicator_ServiceDesc is the grpc.ServiceDesc for Replicator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Replicator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mq.Replicator",
	HandlerType: (*ReplicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _Replicator_Append_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mq.proto",
}
